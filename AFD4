package com.mycompany.automatafd1;

import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class AFD4 {

    private final String estadoInicial = "q0";
    private String estadoActual;

    // Estados de aceptación
    private final String estadoAceptacion1 = "q0,q3";
    private final String estadoAceptacion2 = "q0,q1,q2,q3";

    // Transiciones del autómata
    private Map<String, Map<String, String>> transiciones;

    // Constructor: define las transiciones del autómata
    public AFD4() {
        estadoActual = estadoInicial;
        transiciones = new HashMap<>();

        // Transiciones para el estado "q0"
        Map<String, String> tranQ0 = new HashMap<>();
        tranQ0.put("a", "q0,q1");
        tranQ0.put("b", "q0");
        transiciones.put("q0", tranQ0);

        // Transiciones para el estado "q0,q1"
        Map<String, String> tranQ1 = new HashMap<>();
        tranQ1.put("a", "q0,q1,q2");
        tranQ1.put("b", "q0,q3");
        transiciones.put("q0,q1", tranQ1);

        // Transiciones para el estado "q0,q1,q2"
        Map<String, String> tranQ2 = new HashMap<>();
        tranQ2.put("a", "q0,q1,q2,q3");
        tranQ2.put("b", "q0,q3");
        transiciones.put("q0,q1,q2", tranQ2);

        // Transiciones para el estado "q0,q3"
        Map<String, String> tranQ3 = new HashMap<>();
        tranQ3.put("a", "q0,q1");
        tranQ3.put("b", "q0");
        transiciones.put("q0,q3", tranQ3);

        // Transiciones para el estado "q0,q1,q2,q3"
        Map<String, String> tranQ4 = new HashMap<>();
        tranQ4.put("a", "q0,q1,q2,q3");
        tranQ4.put("b", "q0,q3");
        transiciones.put("q0,q1,q2,q3", tranQ4);
    }

    /**
     * Procesa una cadena de entrada para verificar si es aceptada por el AFD.
     * 
     * @param cadena La cadena de entrada a procesar.
     * @return true si termina en un estado de aceptación; false en caso contrario.
     */
    public boolean procesarAutomata(String cadena) {
        estadoActual = estadoInicial;

        for (int i = 0; i < cadena.length(); i++) {
            String simbolo = String.valueOf(cadena.charAt(i));
            Map<String, String> mapaTransiciones = transiciones.get(estadoActual);

            if (mapaTransiciones != null && mapaTransiciones.containsKey(simbolo)) {
                estadoActual = mapaTransiciones.get(simbolo);
            } else {
                System.out.println("Símbolo no válido: " + simbolo);
                return false;
            }
        }

        // Verificar si el estado final es de aceptación
        return estadoActual.equals(estadoAceptacion1) || estadoActual.equals(estadoAceptacion2);
    }

    // Método main opcional para pruebas rápidas
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        AFD4 automata = new AFD4();

        System.out.print("Ingrese una cadena: ");
        String entrada = scanner.nextLine();

        boolean aceptada = automata.procesarAutomata(entrada);
        System.out.println("Resultado: " + (aceptada ? "Cadena aceptada" : "Cadena no aceptada"));
    }
}
